/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Accessory as PrismaAccessory } from "@prisma/client";

export class AccessoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessory.count(args);
  }

  async accessories(
    args: Prisma.AccessoryFindManyArgs
  ): Promise<PrismaAccessory[]> {
    return this.prisma.accessory.findMany(args);
  }
  async accessory(
    args: Prisma.AccessoryFindUniqueArgs
  ): Promise<PrismaAccessory | null> {
    return this.prisma.accessory.findUnique(args);
  }
  async createAccessory(
    args: Prisma.AccessoryCreateArgs
  ): Promise<PrismaAccessory> {
    return this.prisma.accessory.create(args);
  }
  async updateAccessory(
    args: Prisma.AccessoryUpdateArgs
  ): Promise<PrismaAccessory> {
    return this.prisma.accessory.update(args);
  }
  async deleteAccessory(
    args: Prisma.AccessoryDeleteArgs
  ): Promise<PrismaAccessory> {
    return this.prisma.accessory.delete(args);
  }
}
