/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccessoryService } from "../accessory.service";
import { AccessoryCreateInput } from "./AccessoryCreateInput";
import { Accessory } from "./Accessory";
import { AccessoryFindManyArgs } from "./AccessoryFindManyArgs";
import { AccessoryWhereUniqueInput } from "./AccessoryWhereUniqueInput";
import { AccessoryUpdateInput } from "./AccessoryUpdateInput";

export class AccessoryControllerBase {
  constructor(protected readonly service: AccessoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Accessory })
  async createAccessory(
    @common.Body() data: AccessoryCreateInput
  ): Promise<Accessory> {
    return await this.service.createAccessory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Accessory] })
  @ApiNestedQuery(AccessoryFindManyArgs)
  async accessories(@common.Req() request: Request): Promise<Accessory[]> {
    const args = plainToClass(AccessoryFindManyArgs, request.query);
    return this.service.accessories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Accessory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accessory(
    @common.Param() params: AccessoryWhereUniqueInput
  ): Promise<Accessory | null> {
    const result = await this.service.accessory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Accessory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccessory(
    @common.Param() params: AccessoryWhereUniqueInput,
    @common.Body() data: AccessoryUpdateInput
  ): Promise<Accessory | null> {
    try {
      return await this.service.updateAccessory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Accessory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccessory(
    @common.Param() params: AccessoryWhereUniqueInput
  ): Promise<Accessory | null> {
    try {
      return await this.service.deleteAccessory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
